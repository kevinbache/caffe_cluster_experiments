name: "MNIST_${n_neurons_h0}-${n_neurons_h1}_sigmoid_softmax"
layer {
  name: "data"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.0039215684
  }
  data_param {
    source: "${data_dir}/mnist/mnist_train_lmdb"
    batch_size: ${train_batch_size}
    backend: LMDB
  }
}
layer {
  name: "data"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
    stage: "test-on-train"
  }
  transform_param {
    scale: 0.0039215684
  }
  data_param {
    source: "${data_dir}/mnist/mnist_train_lmdb"
    batch_size: ${train_batch_size}
    backend: LMDB
  }
}
layer {
  name: "data"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
    stage: "test-on-test"
  }
  transform_param {
    scale: 0.0039215684
  }
  data_param {
    source: "${data_dir}/mnist/mnist_test_lmdb"
    batch_size: ${test_batch_size}
    backend: LMDB
  }
}
layer {
  name: "h0_ip"
  type: "InnerProduct"
  bottom: "data"
  top: "h0_ip"
  param {
    lr_mult: 1
    decay_mult: 0
  }
  param {
    lr_mult: 1
    decay_mult: 0
  }
  inner_product_param {
    num_output: ${n_neurons_h0}
    weight_filler {
#      type: "gaussian"
#      std: .01
#      sparse: ${n_neurons_h0_sparse_init}
      ${weight_filler}
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "h0"
  type: "Sigmoid"
  bottom: "h0_ip"
  top: "h0"
}
layer {
  name: "h1_ip"
  type: "InnerProduct"
  bottom: "h0"
  top: "h1_ip"
  param {
    lr_mult: 1
    decay_mult: 0
  }
  param {
    lr_mult: 1
    decay_mult: 0
  }
  inner_product_param {
    num_output: ${n_neurons_h1}
    weight_filler {
#      type: "gaussian"
#      std: .01
#      sparse: ${n_neurons_h0_sparse_init}
      ${weight_filler}
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "h1"
  type: "Sigmoid"
  bottom: "h1_ip"
  top: "h1"
}
layer {
  name: "y_ip"
  type: "InnerProduct"
  bottom: "h1"
  top: "y_ip"
  param {
    lr_mult: 1
    decay_mult: 0
  }
  param {
    lr_mult: 1
    decay_mult: 0
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "gaussian"
      std: .01
      sparse: ${n_neurons_y_sparse_init}
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "y_ip"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "y_ip"
  bottom: "label"
  top: "loss"
}
